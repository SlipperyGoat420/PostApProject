import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class CubeTimer extends JLabel implements MouseListener, ActionListener {
	private static final long serialVersionUID = 1L;
	private JButton startButton, stopButton, clearButton, newScramble;
	private JLabel scramble, display, data;
	private long startTime;
	private Timer timer;
	private boolean running;
	private int dataPos;
	
	public CubeTimer() {
		
		super("  Click to start timer.  ", JLabel.CENTER);
        addMouseListener(this);

		JFrame f = new JFrame("Cubing Timer");
		startButton = new JButton("Start");
		stopButton = new JButton("Stop");
		clearButton = new JButton("Clear");
		newScramble = new JButton("New Scramble");
		scramble = new JLabel();
		display = new JLabel();
		data = new JLabel();
		JLabel dataLabel = new JLabel();
		JLabel image = new JLabel();
		dataPos = 300;
	    
		String eggs = Scrambler.generateScramble();
		
		image.setIcon(new ImageIcon("C:/Users/dnark/Downloads/rubiks-cube-coloured.png"));
		image.setBounds(350,250,300,300);
		f.add(image);
		
		scramble.setFont(new Font("SansSerif", Font.BOLD, 20));
		scramble.setText(eggs);
		scramble.setBounds(30,80,560,30);
		f.add(scramble);
		
		display.setFont(new Font("SansSerif", Font.PLAIN, 96));
	    display.setText("0.000"); 
	    display.setBounds(145,110,380,100);
	    f.add(display);
	    
	    dataLabel.setBounds(20,270,200,40);
		dataLabel.setFont(new Font("SansSerif", Font.PLAIN, 18));
		dataLabel.setText("Previous Time");
	    f.add(dataLabel);
	    
		data.setBounds(20,dataPos,200,40);
		data.setFont(new Font("SansSerif", Font.PLAIN, 18));
	    f.add(data);

		startButton.setBounds(130,230,95,30);  
		startButton.setBackground(Color.GREEN);
		f.add(startButton);  
		startButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				long time = (System.currentTimeMillis() - startTime);
				if (time > 60000) {
					if ((time % 60000) < 10000) {
						display.setText(time / 60000 + ":0" + (time / 1000) % 10 + "." + time % 1000);
					}
					else {
						display.setText(time / 60000 + ":" + ((time - 60000) / 1000) + "." + time % 1000);
					}
				}
				else if (time > 1000) { 
					display.setText(time / 1000 + "." + time % 1000);
		        }
				else {
					display.setText("0." + time);
				}
				if (running == false) {
					running = true;
					startTime = evt.getWhen(); 
					display.setText("0.000");
					if (timer == null) {
						timer = new Timer(100,this);
						timer.start();
					}
					else
						timer.restart();
				}
	       }
		});
		
		stopButton.setBounds(240,230,95,30);
		stopButton.setBackground(Color.RED);
		f.add(stopButton);  
		stopButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				//timer.stop();
				running = false;
				long endTime = evt.getWhen();
				double seconds = (endTime - startTime) / 1000.0;
				if (seconds > 60000) {
					if ((seconds % 60000) < 10000) {
						display.setText(seconds / 60000 + ":0" + (seconds / 1000) % 10 + "." + seconds % 1000);
					}
					else {
						display.setText(seconds / 60000 + ":" + ((seconds - 60000) / 1000) + "." + seconds % 1000);
					}
				}
				else if (seconds > 1000) { 
					display.setText(seconds / 1000 + "." + seconds % 1000);
		        }
				else {
					display.setText("" + seconds);
				}
				timer.stop();
				data.setText(seconds + "");
				scramble.setText(Scrambler.generateScramble());
				updatePos();
			  }
			});
		
		clearButton.setBounds(350,230,95,30); 
		clearButton.setBackground(Color.YELLOW);
		f.add(clearButton);  
		clearButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				display.setText("CLEARED");
				timer.stop();
				scramble.setText(Scrambler.generateScramble());
				display.setText("0.000");
			  }
			});
		
		newScramble.setBounds(195,30,180,40);  
		newScramble.setBackground(Color.CYAN);
		newScramble.setFont(new Font("SansSerif", Font.PLAIN, 20));
		f.add(newScramble);  
		newScramble.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				scramble.setText(Scrambler.generateScramble());
			  }
			});
		
		f.setSize(600,600);  
        f.setLayout(null);  
        f.setVisible(true); 	
	}
	public void updatePos() {
		dataPos += 30;
	}
	
	public void actionPerformed(ActionEvent e) { }
	
	public void mouseClicked(MouseEvent arg0) { }
	
	public void mouseEntered(MouseEvent arg0) { }
	
	public void mouseExited(MouseEvent arg0) { }
	
	public void mousePressed(MouseEvent arg0) { }
	
	public void mouseReleased(MouseEvent arg0) { }
	
    public static void main(String[] args) {
    	@SuppressWarnings("unused")
		CubeTimer stooop = new CubeTimer();
    	
    }
}
